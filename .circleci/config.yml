version: 2.1

orbs:
  tailscale: crowley-namespace/tailscale@1.0.0

commands:
  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV
  
  save-docker-image:
    description: "Saves a Docker image for future Jobs"
    steps:
      - run: mkdir -p /tmp/docker-images/
      - run:
          name: Saving Docker Image
          command: docker save --output /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images/*

  load-docker-image:
    description: "Loads a Docker image"
    steps:
      - attach_workspace:
          at: /tmp
      - run:
            name: Loading Docker Image
            command: docker load --input /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar

  test:
    description: "Launches tests against a Docker image"
    steps:
      - checkout
      - run:
          name: Install goss
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path
            export GOSS_DST=~/bin
            export PATH=$PATH:~/bin
            curl -fsSL https://goss.rocks/install | sh
            goss -version
      - run:
          name: Run dgoss Test
          command: dgoss run -p 8080:8080 ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}

  build:
    description: "Build Docker image"
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build -t ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} -f Dockerfile .

  tagging:
    description: "Add tags to a Docker Image"
    steps:
      - run:
          name: Tag Image
          command: | 
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKER_IMAGE}:${VERSION}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKER_IMAGE}:latest
    
  publish:
    description: "Publish Docker Image"
    steps:  
      - run:
          name: "Publish Docker Images to Docker Hub"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} 
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest

  run-pytest:
    description: "Run PyTest"
    parameters:
      requirements-path:
        type: string
      pytest-args:
        type: string
        default: "--verbose"
    steps:
      - checkout
      - run:
          name: Pip Install Testing Requirements
          command: pip install -r << parameters.requirements-path >>
      - run:
          name: Run PyTest Test Suite
          command: pytest << parameters.pytest-args >>


executors:
  browsers-python:
    docker:
      - image: circleci/python:3.9-browsers

  amd64:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: medium


jobs:
  test-demo:
    executor: browsers-python
    steps:
      - run-pytest:
          requirements-path: "./demo/requirements/testing.txt"
          pytest-args: "--live-server-port 8080 --verbose"

  build-image:
    executor: amd64
    steps:
      - set-build-env
      - build
      - save-docker-image
    environment:
      DOCKER_IMAGE: mind-the-gap-demo

  test-image:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - test
    environment:
      DOCKER_IMAGE: mind-the-gap-demo
      GOSS_SLEEP: 10

  tag-and-publish:
    executor: amd64
    steps:
      - set-build-env
      - tagging
      - publish
    environment:
      DOCKER_IMAGE: mind-the-gap-demo


workflows:
  demo:
    jobs:
      - test-demo:
          name: "Testing Python Demo Code"
      - build-image:
          name: "Building Docker Image"
          requires:
            - "Testing Python Demo Code"
      - test-image:
          name: "Testing Docker Image"
          requires:
            - "Building Docker Image"
      - tag-and-publish:
          name: "Tag and Publish Docker Images"
          requires:
            - "Testing Docker Image"
          filters:
            branches:
              only: testing
      
